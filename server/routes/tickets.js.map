{"version":3,"sources":["routes/tickets.ts"],"names":[],"mappings":"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","file":"routes/tickets.js","sourcesContent":["/* \n    File Name: tickets.ts \n    Authors: Cindy Diaz, Hae Yeon Kang\n    Website Name: Manage Support Website\n    File Description: Routing for tickets\n*/\nimport express = require('express');\nvar router = express.Router();\n\n//DB references\nimport mongoose = require('mongoose');\nimport ticketModel = require('../models/ticket');\nimport Ticket = ticketModel.Ticket;\n\n//Utility function to check if user is authenticated\nfunction requireAuth(req: express.Request, res: express.Response, next: any){\n    //check if user is log in\n    if(!req.isAuthenticated()){\n        return res.redirect('/login');\n    }\n    next();\n}\n//Utitlity to check ticket priority\nfunction checkPriority(urgency,impact){  \n    switch(urgency)\n    {\n        case 'LOW':\n            if(impact == 'LOW'){\n                return 5;\n            }else if(impact == 'MEDIUM'){\n                return 4;\n            }else if(impact == 'HIGH'){\n                return 3;\n            }\n            break;\n        case 'MEDIUM':\n            if(impact == 'LOW'){\n                return 4;\n            }else if(impact == 'MEDIUM'){\n                return 3;\n            }else if(impact == 'HIGH'){\n                return 2;\n            }\n            break;\n         case 'HIGH':\n            if(impact == 'LOW'){\n                return 3;\n            }else if(impact == 'MEDIUM'){\n                return 2;\n            }else if(impact == 'HIGH'){\n                return 1;\n            }\n            break;                     \n    }\n};\n/* GET Tickets main page(Dashboard for admin, My tickets for customers) */\nrouter.get('/', requireAuth,(req:express.Request, res:express.Response, next: any) =>{\n    //Store what type of user is reuesting page\n    var typeUser = req.user ? req.user.type : '';\n    //Display proper page depending on type\n    if( typeUser == 'Admin'){\n        //Use the Ticket model to query the Tickets collection, sorting by High priorit\n        Ticket.find({}).sort({'ticketPriority': 1}).exec(function(error, tickets){\n            if(error){\n                console.log(error);\n                res.end(error);\n            }\n            else {\n                //No error, render dashboard\n                res.render('tickets/index',{\n                    title: 'Dashboard',\n                    tickets : tickets,\n                    typeU: typeUser,\n                    type: req.user.type,\n                    displayName: req.user ? req.user.displayName : ''\n                });\n            }\n        });      \n    }\n    //User is a customer\n    else{\n        //Redirect to proper page\n        res.redirect('/tickets/mytickets');\n    }\n});\n/* GET My tickets page for customers) */\nrouter.get('/mytickets', requireAuth, (req: express.Request, res: express.Response, next: any) => {\n    //Store user id of the user requesting page\n    var userId = req.user ? req.user.username : ''; \n    //Use the Ticket model to query the Tickets collection, filtering by those Tickets created by the user, sorting by high priority\n    Ticket.find({'createdBy' : userId}).sort({'ticketPriority': 1}).exec((error, tickets) => {\n        if (error) {\n            console.log(error);\n            res.end(error);\n        }\n        else {\n            //No error, render page\n            res.render('tickets/mytickets', {\n                title: 'My Tickets',\n                tickets: tickets,\n                type: req.user.type, \n                displayName: req.user ? req.user.displayName : ''\n            });\n        }\n    });\n});\n\n/* GET Closed tickets (Admin only) */\nrouter.get('/closed', requireAuth, (req: express.Request, res: express.Response, next: any) => {\n    //Store user type\n    var typeUser = req.user.type;\n    //Render oage only if type is admin\n    if( typeUser == 'Admin'){\n        //Use the Ticket model to query the Tickets collection, filter tickets that are closed\n        Ticket.find({'incidentNarrative.ticketStatus' : 'Closed'}).sort({'ticketPriority': 1}).exec((error, tickets) => {\n            if (error) {\n                console.log(error);\n                res.end(error);\n            }\n            else {\n                //Render page with only closed tickets\n                res.render('tickets/closed', {\n                    title: 'Closed Tickets',\n                    tickets: tickets,\n                    type: req.user.type, \n                    displayName: req.user ? req.user.displayName : ''\n                });\n            }\n        });\n    }\n    //If user is customer we redirect to my tickets\n    else {\n        res.redirect('/tickets');\n    }\n});\n\n/* GET add tickets */\nrouter.get('/add', requireAuth,(req: express.Request, res: express.Response, next: any)=> {\n    res.render('tickets/add', {\n        title: 'Create New Ticket',\n        type: req.user.type,\n        displayName: req.user ? req.user.displayName : ''\n    });\n});\n\n\n/* POST add page - save the new ticket*/\nrouter.post('/add', requireAuth, (req: express.Request, res: express.Response, next: any) => { \n    //Store the username who created the ticket\n    var createdBy = req.user ? req.user.username : ''; \n    //Determine what priority ticket will have\n    var priority = checkPriority(req.body.ticketUrgency,req.body.ticketImpact);\n    //Use the Ticket model to insert a new ticket into database\n    Ticket.create({     \n        ticketTitle: req.body.ticketTitle,\n        createdBy: createdBy,\n        ticketDescription: req.body.ticketDescription,              \n        customerName: req.body.customerName,\n        customerPhone: req.body.customerPhone,\n        ticketUrgency: req.body.ticketUrgency,\n        ticketImpact: req.body.ticketImpact,\n        ticketPriority: priority, \n        incidentNarrative : \n            {comment : 'Ticket submitted'} //Default first comment on incident narrative\n    }, function(error, Ticket) {\n        if (error) {\n            console.log(error);\n            res.end(error);\n        }\n        //No error redirect to main tickets page \n        else {\n            res.redirect('/tickets');\n        }\n    })\n});\n\n/* GET edit page - show the current ticket in the form*/\nrouter.get('/:id', requireAuth, (req: express.Request, res: express.Response, next: any) => {\n    //Store the id passed as parameter\n    var id = req.params.id;\n    //Store the type of user\n    var typeUser = req.user ? req.user.type : '';\n    //Display different edit page depending on type\n    if( typeUser == 'Admin'){\n        //Use the Ticket model to query the Tickets collection, find by id\n        Ticket.findById(id, (error, Ticket) => {\n            if (error) {\n                console.log(error);\n                res.end(error);\n            }\n            else {\n                //Show the edit view\n                res.render('tickets/edit', {\n                    title: 'Ticket Details',\n                    ticket: Ticket,\n                    typeU: typeUser,\n                    type: req.user.type,\n                    displayName: req.user ? req.user.displayName : ''\n                });\n            }\n        });\n    }\n    //If is customer only show details\n    else{\n        Ticket.findById(id, (error, Ticket) => {\n            if (error) {\n                console.log(error);\n                res.end(error);\n            }\n            else {\n                //show the edit view\n                res.render('tickets/details', {\n                    title: 'Ticket Details',\n                    ticket: Ticket,\n                    typeU: typeUser,\n                    type: req.user.type,\n                    displayName: req.user ? req.user.displayName : ''\n                });\n            }\n        });\n    }\n});\n// \n/* Process edit page - update the selected ticket*/\nrouter.post('/:id', requireAuth,(req: express.Request, res: express.Response, next: any) => {\n    // Store the id from the url parameter\n    var id = req.params.id;\n    var priority = checkPriority(req.body.ticketUrgency,req.body.ticketImpact);\n    var urgency = req.body.ticketUrgency;\n    var impact = req.body.ticketImpact;\n    var incidentComment = req.body.comment;\n    var incidentStatus = req.body.ticketStatus;\n    //Update fields that can be altered\n    Ticket.update({ _id: id},{$set:{ticketUrgency: urgency, ticketImpact: impact, ticketPriority:priority }}, error =>{\n        if (error) {\n            console.log(error);\n            res.end(error);\n        }\n    });\n    //Run an update query for the embedded document\n    Ticket.update({ _id: id }, {$push: {incidentNarrative:{comment : incidentComment, ticketStatus :incidentStatus}}}, (error) => {\n        if (error) {\n            console.log(error);\n            res.end(error);\n        }\n        else {\n            //No error, redirect back to main tickets page\n            res.redirect('/tickets');\n        }\n    });\n});\n//Export content\nmodule.exports = router;"],"sourceRoot":"/source/"}